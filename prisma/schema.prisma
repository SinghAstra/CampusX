datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(STUDENT)
  accounts      Account[]
  sessions      Session[]
  student       Student?
  university    University?
  company       Company?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  STUDENT
  UNIVERSITY
  COMPANY
  GOVERNMENT
}

model University {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  name      String
  location  String
  students  Student[]
  placements Placement[]
}

model Student {
  id           String     @id @default(uuid())
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id])
  universityId String
  university   University @relation(fields: [universityId], references: [id])
  course       String
  graduationYear Int
  skills       String[]
  placements   Placement[]
  applications JobApplication[]
}

model Company {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  name      String
  industry  String
  jobListings JobListing[]
  placements Placement[]
}

model JobListing {
  id          String     @id @default(uuid())
  title       String
  description String
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id])
  skillsRequired String[]
  salary      Float?
  applications JobApplication[]
}

model JobApplication {
  id           String     @id @default(uuid())
  studentId    String
  student      Student    @relation(fields: [studentId], references: [id])
  jobListingId String
  jobListing   JobListing @relation(fields: [jobListingId], references: [id])
  status       ApplicationStatus
  appliedAt    DateTime   @default(now())
}

model Placement {
  id           String     @id @default(uuid())
  studentId    String
  student      Student    @relation(fields: [studentId], references: [id])
  companyId    String
  company      Company    @relation(fields: [companyId], references: [id])
  universityId String
  university   University @relation(fields: [universityId], references: [id])
  jobTitle     String
  salary       Float
  placementDate DateTime
}

enum ApplicationStatus {
  PENDING
  INTERVIEWING
  REJECTED
  ACCEPTED
}